from email import message
import json
from pickletools import read_int4
from threading import local
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from bs4 import BeautifulSoup
import re
import time
import pandas as pd
import numpy as np
from tabulate import tabulate

#driver = webdriver.Chrome()
driver = webdriver.Chrome(ChromeDriverManager().install())
driver.get("https://www.twitch.tv/trick2g")

#Make sure chat is loaded in - wait for enough messages with time.sleep
page_load = WebDriverWait(driver, 30).until(
EC.presence_of_element_located((By.CLASS_NAME, 'chat-line__message'))
)
#Variables for descriptives (without dicts)
emote_list_all = []
chat_list_all = []
badge_list_all = []
users_all = []

for i in range(2):
    print("start collection")
    time.sleep(10)
    #Store data
    stream_data = driver.page_source
    #Extract divs
    soup = BeautifulSoup(stream_data, 'lxml')
    chats_selector = soup.find_all('div', class_='chat-line__message')
    channel_info = soup.find('div', class_='channel-info-content')

    #Extract time and viewer count
    stream_time = channel_info.find('span', class_=re.compile('live-time')).text
    chat_list.append(stream_time)
    
    #Extract chat outputs to list
    for chat_selector in chats_selector:
        chats = {}
        #ID
        id_span = chat_selector.find('span', class_=re.compile('chat-author__display-name')).text
        chats['id'] = hash(id_span)
        users_all.append(hash(id_span))

        #Message
        chat_span = chat_selector.find('span', class_='text-fragment')
        try:
            chat = chat_selector.find('span', class_=re.compile('text-fragment')).text 
            chat_list_all.append(chat)
            chats['message'] = chat_selector.find('span', class_=re.compile('text-fragment')).text      
        except:
            chats['message'] = "N/A"     

        #Badge(s)
        badge_list = []
        try:
            badge_divs = chat_selector.find_all('img', class_='chat-badge')
            for badge_div in badge_divs:
                badge = badge_div['alt']
                badge_list.append(badge)
                badge_list_all.append(badge)  
            chats['badge(s)'] = badge_list
        except:
            chats['badge(s)'] = "N/A"
        #Emote(s)

        emote_list = []
        try:
            emote_divs = chat_selector.find_all('img', class_='chat-image chat-line__message--emote')
            for emote_div in emote_divs:
                emote = emote_div['alt']
                emote_list.append(emote)
                emote_list_all.append(emote)
        except:
            emote_list.append("No emote")
        
        chats['emote(s)'] = emote_list
        chat_list.append(chats)
        messages['messages'] = chat_list
    print("1 minute loop is done!")

json = json.dumps(messages, indent=4)
print(json)
print("Stream scraping is done!")

with open("twitch_chat_json", "w") as outfile:
    outfile.write(json)

driver.close()

emote = pd.DataFrame(emote_list_all)
badge = pd.DataFrame(badge_list_all)
chat = pd.DataFrame(chat_list_all)
users = pd.DataFrame(users_all)
new_users = set(users_all)

table = [['Number of emotes', len(emote)], ['Number of badges', len(badge)], ['Number of chatmessages', len(chat)], ['Number of users', len(users)], ['Number of unique users', len(new_users)]]
print('Descriptive Table:')
print(tabulate(table, tablefmt='fancy_grid'))
